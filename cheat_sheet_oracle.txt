+-------------------------------------------------------------------------------------------+ 
|																							|
|	1. CREATE TABLE																			|
|																							|
+-------------------------------------------------------------------------------------------+
	CREATE TABLE table_name(
		ID NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1)
		,column_name varchar2(450) NOT NULL
		,primary key (id)
	)
	

+-------------------------------------------------------------------------------------------+ 
|																							|
|	2. CREATE TABLE WITH XMLTYPE															|
|																							|
+-------------------------------------------------------------------------------------------+
	create table test_tbl_xml ( xml_data clob); 
	insert into test_tbl_xml (xml_data) values(to_clob(
		'
			<customer>
				<name>Mustermann</name>
			</customer>
		'
	))
	
+-------------------------------------------------------------------------------------------+ 
|																							|
|	2. DB_OBJECTS: USER DEFINED FUNCTION													|
|																							|
+-------------------------------------------------------------------------------------------+
	drop FUNCTION <function_name>;
	drop type test_tab;
	drop type test_type; 

	CREATE OR REPLACE TYPE test_type as object(
		id number(10)
		,ent_dn varchar2(128)
	);

	CREATE OR REPLACE TYPE test_tab as table of test_type;
	select * from <function_name>()

 
+-------------------------------------------------------------------------------------------+ 
|																							|
|	2. DB_INFO: USER DEFINED TYPE															|
|																							|
+-------------------------------------------------------------------------------------------+
	select allCollTypes.type_name,allCollTypes.elem_type_name,allTypeAttrs.attr_name,allTypeAttrs.ATTR_NO from all_coll_types allCollTypes
	inner join all_type_ATTRS allTypeAttrs on allTypeAttrs.type_name = allCollTypes.elem_type_name
	WHERE allCollTypes.ELEM_TYPE_NAME='<type_name>'
	
	
+-------------------------------------------------------+ 
|														|
|	2. DB_INFO:	USER DEFINED FUNCTION					|
|														|
+-------------------------------------------------------+ 
	select * from user_objects where object_name like '<name>' and object_type='FUNCTION'
	
	
+-------------------------------------------------------+ 
|														|
|	2. DB_INFO:	TABLE INFO								|
|														|
+-------------------------------------------------------+	
	select NULLABLE,COLUMN_NAME,DATA_TYPE,COLUMN_ID,DATA_LENGTH,DATA_DEFAULT 
	from sys.all_tab_columns col inner join sys.all_tables t on col.owner = t.owner      
	and col.table_name = t.table_name where col.owner = '<schema_owner>' 
	and col.table_name = '<table_name>' order by col.column_id
	
+-------------------------------------------------------------------------------------------+ 
|																							|
|	2. CSV AS INPUT PARAM																	|
|																							|
+-------------------------------------------------------------------------------------------+

create or replace PROCEDURE get_Sample_request (
    in_request_status IN  VARCHAR2,
    out_cursor       OUT SYS_REFCURSOR

) AS
    sql_qry     VARCHAR2 (150);
    emp_tot     NUMBER(3);
BEGIN
    OPEN out_cursor FOR
      SELECT *
      FROM   user_requests
      WHERE  request_status IN (SELECT REGEXP_SUBSTR(in_request_status, '[^,]+', 1, LEVEL)
                                FROM   DUAL
                                CONNECT BY LEVEL <= REGEXP_COUNT(in_request_status, '[^,]+'));
END get_Sample_request;

 
+-------------------------------------------------------------------------------------------+
|																							|
|	11. oracle_regex: after slash															|
|																							|
+-------------------------------------------------------------------------------------------+
	select upper(regexp_substr ('string\string1','([^\\.*])+$')) result from dual
	

+-------------------------------------------------------------------------------------------+
|																							|
|	11. oracle_regex: common name															|
|																							|
+-------------------------------------------------------------------------------------------+
	select regexp_substr ('memberOf.containsAll({"distinguished name"})','(CN=)([^,])+') from dual
	
	
+-------------------------------------------------------------------------------------------+
|																							|
|	11. oracle_regex: clean curly parentesess												|
|																							|
+-------------------------------------------------------------------------------------------+
	select regexp_substr ('{string}','\{(.+)\}',1,1,null,1) from dual

 

+-------------------------------------------------------------------------------------------+
|																							|
|	LIST USER STORED PROCEDURE																|
|																							|
+-------------------------------------------------------------------------------------------+
	SELECT     object_name FROM     user_procedures WHERE     object_type = 'PROCEDURE'  and object_name like '%'
	

+-------------------------------------------------------------------------------------------+
|																							|
|	11. TRUNCATE TABLE																		|
|																							|
+-------------------------------------------------------------------------------------------+
	truncate table T_XML_TEST_1 drop storage
	drop table T_XML_TEST_1
	

+-------------------------------------------------------------------------------------------+
|																							|
|	11. SHOW INDEXES																		|
|																							|
+-------------------------------------------------------------------------------------------+
SELECT ai.index_name, ai.index_type, ai.uniqueness, aic.*
FROM all_indexes ai INNER JOIN all_ind_columns aic
     ON ai.owner = aic.index_owner
     AND ai.index_name = aic.index_name
WHERE ai.owner = UPPER('<schema_name>')
  AND ai.table_name = UPPER('<table_name>') and  ai.index_name LIKE '%<name>%'
ORDER BY aic.column_position 



+-------------------------------------------------------------------------------------------+ 
|																							|	
|	4. Add Remove Columns																	|
|																							|
+-------------------------------------------------------------------------------------------+
	alter table <table_name> drop column STATUSMAKAV;	
	alter table <table_name> add   STATUSMAKAV1 varchar2(100);
	
	
+-------------------------------------------------------------------------------------------+ 
|																							|	
|	5. Modify Existing column																|
|																							|
+-------------------------------------------------------------------------------------------+


--set not null
	alter table "table_name" modify (user_id not null);
	
--set nullable
	alter table table_name modify (<col_name> null);
	
+-------------------------------------------------------------------------------------------+ 
|																							|	
|	6. Rename Existing column																|
|																							|
+-------------------------------------------------------------------------------------------+
	alter table <table_name> rename column <col_name> to name;
	

+-------------------------------------------------------------------------------------------+ 
|																							|	
|	7. oracle_regex: everything before first appearance of character						|
|																							|
+-------------------------------------------------------------------------------------------+
	select substr('aaa__bbb__ccc__ddd__23__45__tttt.containsAll({"68"})', 1, instr('aaa__bbb__ccc__ddd__23__45__tttt.containsAll({"68"})', '.') -1) from dual


+-------------------------------------------------------------------------------------------+ 
|																							|	
|	8. oracle_regex: everything after first appearance of character							|
|																							|
+-------------------------------------------------------------------------------------------+
	select substr('ad_H_A_A_SD',  instr('ad_H_A_A_SD', '_') +1) from dual
	
	
+-------------------------------------------------------------------------------------------+ 
|																							|	
|	10. oracle_regex: string between parenthesis and quotes									|
|																							|
+-------------------------------------------------------------------------------------------+
	select regexp_substr ('UPPER("rsd")','\(\"(.+)\"\)',1,1,null,1) from dual
	

+-------------------------------------------------------------------------------------------+ 
|																							|	
|	11. oracle_regex: dashes																|
|																							|
+-------------------------------------------------------------------------------------------+
	SELECT Trim (REGEXP_SUBSTR('TEST-NAME', '([^-]*)(-|$)', 1, 1, '', 1)) as splitted_test
	,Trim (REGEXP_SUBSTR('TEST-NAME', '([^-]*)(-|$)', 1, 2, '', 1)) as splitted_name
	from dual


+-------------------------------------------------------------------------------------------+ 
|																							|	
|	11. stored procedure arguments															|
|																							|
+-------------------------------------------------------------------------------------------+
	SELECT * FROM USER_ARGUMENTS where object_name like 'stored procedure name%'


+-------------------------------------------------------------------------------------------+ 
|																							|	
|	11. user defined tables functions 														|
|																							|
+-------------------------------------------------------------------------------------------+
select * from all_type_ATTRS where owner='<owner_name>'
select * from user_objects where object_name like 'name%';
SELECT * FROM USER_ARGUMENTS where object_name like 'name%';
select obj.owner as schema_name,
       obj.object_name as function_name,
       ret.data_type as return_type,
       LISTAGG(args.in_out || ' ' || args.data_type, '; ')
              WITHIN GROUP (ORDER BY position) as arguments
from sys.all_objects obj
join sys.all_arguments args on args.object_id = obj.object_id
join (
      select object_id,
             object_name,
             data_type
      from sys.all_arguments
      where position = 0
) ret on ret.object_id = args.object_id
       and ret.object_name = args.object_name
where obj.object_type = 'FUNCTION'
      and obj.owner  in ('ssss')
      and args.position > 0 AND obj.object_name like '<name>%'
group by obj.owner,
         obj.object_name,
         ret.data_type
order by schema_name,
         function_name;
		 
		 
+-------------------------------------------------------------------------------------------+ 
|																							|	
|	11. user defined types																	|
|																							|
+-------------------------------------------------------------------------------------------+
SELECT   table_name FROM   user_tables WHERE    table_name like 'typesss_T%'
select * from all_types where owner='test' AND TYPE_NAME='typesss_TAB_CRTFCTN_DTLS'


select * from user_objects where object_name like 'typesss_%' and object_type='FUNCTION'
select * from user_objects where object_name like 'typesss_T%'
SELECT * FROM USER_ARGUMENTS where object_name like 'typesss_RPRT%'
SELECT * FROM USER_ARGUMENTS where object_name like 'typesss_T%'


+-------------------------------------------------------------------------------------------+ 
|																							|	
|	11. table size																			|
|																							|
+-------------------------------------------------------------------------------------------+

select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name='table_name' 
group by segment_name,segment_type
union all
select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name in( select segment_name from user_lobs
                       where table_name in ('table_name')
                       union all
                       select index_name from user_lobs
                       where table_name  in ('table_name')
                       )
group by segment_name,segment_type
union all 
select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name in( select index_name from user_indexes where table_name  in ('table_name')) 
group by segment_name,segment_type;


select max(identity_id) max_value,min(identity_id) min_value,avg(identity_id) avg_value from
(
	select count (*) over (partition by identity_id) identity_id
	from table_name
)


##Oracle 12c+ only
create table t1 (
    c1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
    c2 VARCHAR2(10)
    );

Next we need to add a PRIMARY KEY constraint:

ALTER TABLE books
  ADD (
    CONSTRAINT books_pk PRIMARY KEY (id)
  );

##without auto increment
CREATE TABLE books (
  id      NUMBER(10)    NOT NULL,
  title   VARCHAR2(100) NOT NULL
);
Next we need to add a PRIMARY KEY constraint:

ALTER TABLE books
  ADD (
    CONSTRAINT books_pk PRIMARY KEY (id)
  );
Finally, we’ll create our SEQUENCE that will be utilized later to actually generate the unique, auto incremented value.

CREATE SEQUENCE books_sequence;


+-----------------------------------------------------------+
|															|
|	TIMEZONE												|
|															|
+-----------------------------------------------------------+ 

select dbtimezone, sessiontimezone from dual


select TO_CHAR(from_tz(timestamp '2021-11-11 08:00:00','+2:00') at time zone 'Asia/Jerusalem','MM-DD-YYYY HH:MI:SS') from dual


--created field is unix epoch like this 1635831754978
select to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(created/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') from spt_table where name='input_name'

--created field is unix epoch like this 1635831754978
select to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(created/1000,'SECOND'),('+2:00')) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') from spt_table where name='input_name'



---1635831754978 == 02-11-2021 07:42
select TO_TIMESTAMP('1970-01-01','YYYY-MM-DD')+NUMTODSINTERVAL(1635831754978/1000,'SECOND') from dual
select TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(1635831754978/1000,'SECOND'),'0:00') at time zone 'Asia/Jerusalem','MM-DD-YYYY HH:MI:SS') from dual

select bundle_created_date,bundle_modified_date, trunc (minutes_ /60) || ' Hours, ' || trunc(mod(minutes_,60)) || ' minutes ' diff
from ( 

select 
 to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(created/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') bundle_created_date,
to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(modified/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') bundle_modified_date,
(to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(modified/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') 
- to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(created/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS')) *24*60 as minutes_
from spt_bundle


)

+-----------------------------------------------------------+
|															|
|	ADD DAYS TO DATE										|
|															|
+-----------------------------------------------------------+ 

select my_date2, TO_TIMESTAMP(my_date2,'YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(2,'DAY') from(
	select TO_CHAR (trunc(my_date, 'DD'),                'YYYY-MM-DD HH24:MI:SS') my_date2 from (
		select to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(1594215916868/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') my_date from dual
	)
)

+-----------------------------------------------------------+
|															|
|	FROM DATE STRING TO MILLISECONDS						|
|															|
+-----------------------------------------------------------+

SELECT to_number(to_date('2020-07-10 16:45:16','YYYY-MM-DD HH24:MI:SS')   - to_date('1970-01-01','YYYY-MM-DD')) * (24 * 60 * 60 * 1000) milliseconds  FROM dual;

+-----------------------------------------------------------+
|															|
|	FROM MILIS TO DATE WITH MILIS							|
|															|
+-----------------------------------------------------------+

select TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.FF3')+NUMTODSINTERVAL(1707741040394/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS.FF3') my_date

from dual;


--following statement shows id_number that DOES NOT EXIST!!!! table
drop type string_tab force;
create type string_tab is table of varchar(9);
SELECT *   FROM TABLE(string_tab('id','id1','id2'))
WHERE COLUMN_VALUE NOT IN (SELECT id_number FROM table);
--release_variable string_tab
drop type string_tab force;




+-----------------------------------------------------------+
|															|
| COUNT ALL ROWS											|
|															|
+-----------------------------------------------------------+

select count(*) from table_name


+-----------------------------------------------------------+
|															|
| COUNT DOUBLED ROWS										|
|															|
+-----------------------------------------------------------+
select count(*) from table_name where rowid not in (select min(rowid)   from table_name group by list_of_fields)

--delete doubled rows
delete from table_name where rowid not in (select min(rowid) from table_name group by list_of_fields)



+-----------------------------------------------------------+
|															|
|		IF FIRST QUERY RETURN EMPTY USE ANOTHER				|
|															|
+-----------------------------------------------------------+
source (https://stackoverflow.com/questions/12980854/oracle-db-return-second-query-if-first-query-is-empty)
WITH query1 as (
    select 1, 2
    from dual
    where 1=0
    connect by level <= 10
),
query2 as (
    select 3, 4
    from dual
    connect by level <= 10
)
select *
from query1
union all
select *
from query2
where not exists (
    select null
    from query1
);


+-----------------------------------------------------------+
|															|
|		CHILD COLUMN IS CSV									|
|															|
+-----------------------------------------------------------+
https://medium.com/swlh/three-routes-convert-comma-separated-column-to-rows-c17c85079ecf

+-----------------------------------------------------------+
|															|
|	Three Routes: Convert Comma-Separated Column to Rows	|
|															|
+-----------------------------------------------------------+
//https://medium.com/swlh/three-routes-convert-comma-separated-column-to-rows-c17c85079ecf
column a is parent column b is csv of children (parent_and_csv_of_children)


select t.customer,
trim(regexp_substr(t.orders, '[^,]+', 1, lines.column_value))
as "Order"
from checkout t,
table(cast(multiset(
select level from dual
connect by level <=
regexp_count(t.orders, ',')+1
) as sys.odciNumberList
)
)lines
order by customer,
lines.column_value;

+-----------------------------------------------------------+
|															|
| CHECK ONLY DIGITS											|
|															|
+-----------------------------------------------------------+
https://stackoverflow.com/questions/3932230/oracle-sql-query-that-returns-rows-with-only-numeric-values
SELECT X  FROM SO WHERE REGEXP_LIKE(X, '^[[:digit:]]+$');


Oracle Hierarchical query: how to follow max on each level
https://dba.stackexchange.com/questions/81313/oracle-hierarchical-query-how-to-follow-max-on-each-level
select lpad(' ',2*(level-1))|| max(child)
from test_connect_by  
start with parent is null
connect by prior child = parent
group by level

select lpad(' ',2*(level-1)) || child as result
from 
  ( select parent, max(child) as child 
    from test_connect_by 
    group by parent
  ) t 
start with parent is null 
connect by prior child = parent
order by level ;


