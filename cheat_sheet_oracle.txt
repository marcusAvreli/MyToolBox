+-------------------------------------------------------+
|										======1======	|
|	CREATE TABLE										|
|														|
+-------------------------------------------------------+
	CREATE TABLE table_name(
		ID NUMBER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1)
		,column_name varchar2(450) NOT NULL
		,primary key (id)
	)
	

+-------------------------------------------------------+
|										======2======	|
|	CREATE TABLE WITH XMLTYPE							|
|														|
+-------------------------------------------------------+
	create table test_tbl_xml ( xml_data clob); 
	insert into test_tbl_xml (xml_data) values(to_clob(
		'
			<customer>
				<name>Mustermann</name>
			</customer>
		'
	))
	
	
+-------------------------------------------------------+
|										======3======	|
|	DB_OBJECTS: USER DEFINED FUNCTION					|
|														|
+-------------------------------------------------------+
	drop FUNCTION <function_name>;
	drop type test_tab;
	drop type test_type; 

	CREATE OR REPLACE TYPE test_type as object(
		id number(10)
		,ent_dn varchar2(128)
	);

	CREATE OR REPLACE TYPE test_tab as table of test_type;
	select * from <function_name>()

	
+-------------------------------------------------------+
|										======4======	|
|	DB_OBJECTS:	CREATE STORED PROCEDURE					|
|														|
+-------------------------------------------------------+
	create or replace procedure <PROC_NAME>
	as
	begin
		<QUERY BODY>
		commit;
		
		Exception
			when others then
			raise_application_error( -20001,sqlerrm );
	END; 
	
	
+-------------------------------------------------------+
|										======5======	|
|	DB_INFO:	USER DEFINED TYPE						|
|														|
+-------------------------------------------------------+
	select allCollTypes.type_name,allCollTypes.elem_type_name,allTypeAttrs.attr_name,allTypeAttrs.ATTR_NO from all_coll_types allCollTypes
	inner join all_type_ATTRS allTypeAttrs on allTypeAttrs.type_name = allCollTypes.elem_type_name
	WHERE allCollTypes.ELEM_TYPE_NAME='<type_name>'
	
	
+-------------------------------------------------------+ 
|										======6======	|
|	DB_INFO:	USER DEFINED FUNCTION					|
|														|
+-------------------------------------------------------+ 
	select * from user_objects where object_name like '<name>' and object_type='FUNCTION'


+-------------------------------------------------------+
|										======7======	|
|	DB_INFO:	TABLE INFO								|
|														|
+-------------------------------------------------------+
	select NULLABLE,COLUMN_NAME,DATA_TYPE,COLUMN_ID,DATA_LENGTH,DATA_DEFAULT 
	from sys.all_tab_columns col inner join sys.all_tables t on col.owner = t.owner      
	and col.table_name = t.table_name where col.owner = '<schema_owner>' 
	and col.table_name = '<table_name>' order by col.column_id


+-------------------------------------------------------+
|										======8======	|
|	DB_INFO:	SHOW INDEXES							|
|														|
+-------------------------------------------------------+
	SELECT ai.index_name, ai.index_type, ai.uniqueness, aic.*
	FROM all_indexes ai INNER JOIN all_ind_columns aic
		 ON ai.owner = aic.index_owner
		 AND ai.index_name = aic.index_name
	WHERE ai.owner = UPPER('<schema_name>')
	  AND ai.table_name = UPPER('<table_name>') and  ai.index_name LIKE '%<name>%'
	ORDER BY aic.column_position


+-------------------------------------------------------+
|										======9======	|
|	DB_INFO:	LIST USER STORED PROCEDURE				|
|														|
+-------------------------------------------------------+
	SELECT     object_name FROM     user_procedures WHERE     object_type = 'PROCEDURE'  and object_name like '%'

	


 

+-------------------------------------------------------+
|										======11======	|
|	TRUNCATE TABLE										|
|														|
+-------------------------------------------------------+
	truncate table T_XML_TEST_1 drop storage
	drop table T_XML_TEST_1


+-------------------------------------------------------+
|										======12======	|
|	ADD REMOVE COLUMNS									|
|														|
+-------------------------------------------------------+
	alter table <table_name> drop column STATUSMAKAV;	
	alter table <table_name> add   STATUSMAKAV1 varchar2(100);
	
	
+-------------------------------------------------------+
|										======13======	|
|	MODIFY EXISTING COLUMN								|
|														|
+-------------------------------------------------------+
--set not null
	alter table "table_name" modify (user_id not null);
	
--set nullable
	alter table table_name modify (<col_name> null);
	
	
+-------------------------------------------------------+
|										======14======	|
|	RENAME EXISTING COLUMN								|
|														|
+-------------------------------------------------------+
	alter table <table_name> rename column <col_name> to name;


+-------------------------------------------------------+
|										======15======	|
|	RENAME EXISTING TABLE								|
|														|
+-------------------------------------------------------+
	rename table old_name to new_name;
	
	
+-------------------------------------------------------+
|										======16======	|
|	ADD REMOVE CONSTRAINTS								|
|														|
+-------------------------------------------------------+
	alter table table_name drop constraint   constraint_name
	alter table local_table add constraint constrinat_name FOREIGN KEY (local_filed) references another_table(id) on delete cascade
               

+-------------------------------------------------------+
|										======17======	|
|	DROP TABLE											|
|														|
+-------------------------------------------------------+
	drop table table_name cascade constraints purge;


+-------------------------------------------------------+
|										======18======	|	
|	oracle_regex										|
|														|
+-------------------------------------------------------+	


1.	oracle_regex: everything before first appearance of character:
		select substr('aaa__bbb__ccc__ddd__23__45__tttt.containsAll({"68"})', 1, instr('aaa__bbb__ccc__ddd__23__45__tttt.containsAll({"68"})', '.') -1) from dual

	
2.	oracle_regex: everything after first appearance of character:
		select substr('ad_H_A_A_SD',  instr('ad_H_A_A_SD', '_') +1) from dual
		
	
3.	oracle_regex: string between parenthesis and quote:
		select regexp_substr ('UPPER("rsd")','\(\"(.+)\"\)',1,1,null,1) from dual

		
4.	oracle_regex: dashes:
		SELECT Trim (REGEXP_SUBSTR('TEST-NAME', '([^-]*)(-|$)', 1, 1, '', 1)) as splitted_test
		,Trim (REGEXP_SUBSTR('TEST-NAME', '([^-]*)(-|$)', 1, 2, '', 1)) as splitted_name 		from dual


5.	oracle_regex: after slash
		select upper(regexp_substr ('string\string1','([^\\.*])+$')) result from dual


6.	oracle_regex: common name
		select regexp_substr ('memberOf.containsAll({"distinguished name"})','(CN=)([^,])+') from dual
	

7.	oracle_regex: clean curly parentesess
		select regexp_substr ('{string}','\{(.+)\}',1,1,null,1) from dual

	
8.	oracle_regex: only digits		
		SELECT X  FROM SO WHERE REGEXP_LIKE(X, '^[[:digit:]]+$');		
			source:	https://stackoverflow.com/questions/3932230/oracle-sql-query-that-returns-rows-with-only-numeric-values		


9. change under_score_case to CamelCase
	select substr(lower('Camel Case means the first char should be lower cased'),1,1)||substr(replace(initcap('Camel Case means the first char should be lower cased'),' '),2) from dual;
	select substr(lower('Camel_Case_means_the_first_char_should_be_lower_cased'),1,1)||substr(replace(initcap('Camel_Case_means_the_first_char_should_be_lower_cased'),'_'),2) from dual;
	
+-------------------------------------------------------+
|										======19======	|
|	STRING MANIPULATIONS								|
|														|
+-------------------------------------------------------+	
1. remove_last_character
	//https://stackoverflow.com/questions/60938354/how-to-remove-first-3-and-last-5-characters-from-account-column-in-oracle-sql
	SELECT substr( 'last_character',1, length('last_character')-1 ) as "Result" from dual


+-------------------------------------------------------+
|										======19======	|
|	DB_INFO:	STORED PROCEDURE ARGUMENTS				|
|														|
+-------------------------------------------------------+
	SELECT * FROM USER_ARGUMENTS where object_name like 'stored procedure name%'


+---------------------------------------------------------------------------------------------------------------+
|																								======20======	|
|									USER DEFINED FUNCTIONS														|
|																												|
+---------------------------------------------------------------------------------------------------------------+


+-------------------------------------------------------+
|										===20=1======	|
|	UDF RETURNS SINGLE FIELD							|
|		(user-defined function)							|
+-------------------------------------------------------+
	CREATE OR REPLACE FUNCTION function_name
	RETURN number
	IS
	pt_created number(19);
	BEGIN
		SELECT created
		INTO pt_created
		FROM table_name WHERE name = '0002811652';
		return pt_created;
	EXCEPTION

	when others then
		raise_application_error( -20001,sqlerrm );
	END function_name; 
	/*
	-1-
	*/
	call function from client
		select umtb_log_rprt_pt() from dual
		

+-------------------------------------------------------+
|										===20=2======	|
|	DB_INFO:	USER DEFINED TABLES FUNCTIONS 			|
|														|
+-------------------------------------------------------+
select * from all_type_ATTRS where owner='<owner_name>'
select * from user_objects where object_name like 'name%';
SELECT * FROM USER_ARGUMENTS where object_name like 'name%';
select obj.owner as schema_name,
       obj.object_name as function_name,
       ret.data_type as return_type,
       LISTAGG(args.in_out || ' ' || args.data_type, '; ')
              WITHIN GROUP (ORDER BY position) as arguments
from sys.all_objects obj
join sys.all_arguments args on args.object_id = obj.object_id
join (
      select object_id,
             object_name,
             data_type
      from sys.all_arguments
      where position = 0
) ret on ret.object_id = args.object_id
       and ret.object_name = args.object_name
where obj.object_type = 'FUNCTION'
      and obj.owner  in ('ssss')
      and args.position > 0 AND obj.object_name like '<name>%'
group by obj.owner,
         obj.object_name,
         ret.data_type
order by schema_name,
         function_name;
		 


 
+-------------------------------------------------------+
|										===20=3======	|	
|	DB_INFO:	USER DEFINED TYPES						|
|														|
+-------------------------------------------------------+
	SELECT   table_name FROM   user_tables WHERE    table_name like 'typesss_T%'
	select * from all_types where owner='test' AND TYPE_NAME='typesss_TAB_CRTFCTN_DTLS'


	select * from user_objects where object_name like 'typesss_%' and object_type='FUNCTION'
	select * from user_objects where object_name like 'typesss_T%'
	SELECT * FROM USER_ARGUMENTS where object_name like 'typesss_RPRT%'
	SELECT * FROM USER_ARGUMENTS where object_name like 'typesss_T%'


+-------------------------------------------------------+
|										======21======	|
|	DB_INFO:	SIZE OF TABLE 							|
|														|
+-------------------------------------------------------+

select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name='table_name' 
group by segment_name,segment_type
union all
select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name in( select segment_name from user_lobs
                       where table_name in ('table_name')
                       union all
                       select index_name from user_lobs
                       where table_name  in ('table_name')
                       )
group by segment_name,segment_type
union all 
select segment_name,segment_type, sum(bytes/1024/1024/1024) GB
from user_segments
where segment_name in( select index_name from user_indexes where table_name  in ('table_name')) 
group by segment_name,segment_type;


select max(identity_id) max_value,min(identity_id) min_value,avg(identity_id) avg_value from
(
	select count (*) over (partition by identity_id) identity_id
	from table_name
)


##Oracle 12c+ only
create table t1 (
    c1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1),
    c2 VARCHAR2(10)
    );

Next we need to add a PRIMARY KEY constraint:

ALTER TABLE books
  ADD (
    CONSTRAINT books_pk PRIMARY KEY (id)
  );

##without auto increment
CREATE TABLE books (
  id      NUMBER(10)    NOT NULL,
  title   VARCHAR2(100) NOT NULL
);
Next we need to add a PRIMARY KEY constraint:

ALTER TABLE books
  ADD (
    CONSTRAINT books_pk PRIMARY KEY (id)
  );
Finally, we’ll create our SEQUENCE that will be utilized later to actually generate the unique, auto incremented value.

CREATE SEQUENCE books_sequence;


+-------------------------------------------------------+
|										======22======	|
|      DATE TIME datetime								|
|														|
+-------------------------------------------------------+

==1==> sydate to miliseconds
	SELECT 
		(SYSDATE - TO_DATE('1970/01/01', 'YYYY/MM/DD')) * (24 * 60 * 60 * 1000) AS TODAY_MS 
	FROM DUAL;
	
	
==2==>	oracle systimestamp (sysdate) to milliseconds
	DB timezone agnostic
	with milliseconds
	works in XE: 
	source: https://stackoverflow.com/questions/7147982/oracle-systimestamp-sysdate-to-milliseconds
	function current_time_ms
        return number
    is
        out_result number;
    begin
        select extract(day from(sys_extract_utc(systimestamp) - to_timestamp('1970-01-01', 'YYYY-MM-DD'))) * 86400000 
            + to_number(to_char(sys_extract_utc(systimestamp), 'SSSSSFF3'))
        into out_result
        from dual;
        return out_result;
    end current_time_ms;
		
	
==3==>	date time from miliseconds with precision
	select TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.ff9')+NUMTODSINTERVAL(1593323213071/1000,'SECOND') from dual 


==4==>	add days to date
	select TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.ff9')+NUMTODSINTERVAL(1593323213071/1000,'SECOND') +NUMTODSINTERVAL(2,'DAY') from dual 


==5==>	from date string to milliseconds
	SELECT to_number(to_date('2020-07-10 16:45:16','YYYY-MM-DD HH24:MI:SS')   - to_date('1970-01-01','YYYY-MM-DD')) * (24 * 60 * 60 * 1000) milliseconds  FROM dual;            


==6==>	different format
	select TO_CHAR(TO_TIMESTAMP('10.05.2012', 'DD.MM.YYYY') - NUMTODSINTERVAL(1/1000, 'SECOND'), 'DD.MM.YYYY HH24:MI:SS:FF3')  Res 
	from dual;             


==7==>	human readable difference between dates
	select trunc (minutes_ /60) || ' Hours, ' || trunc(mod(minutes_,60)) || ' minutes ' diff 
	from(
		select  (to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(1708236730612/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS')
			- to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(1593091693919/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS')) *24*60 as minutes_ from dual
	)


==8==>	timestamp with time zone
	select TO_CHAR(from_tz(timestamp '2021-11-11 08:00:00','+2:00') at time zone 'Asia/Jerusalem','MM-DD-YYYY HH:MI:SS') from dual
		https://topic.alibabacloud.com/a/oracle-convert-milliseconds-to-date-get-information-for-one-day_1_46_30022517.html
		
		
==9==> Get the information for a day
	select * from WORKSCANINFO where TO_CHAR(SCANDATE,‘DD-MM-YY‘) 
		in(
		  SELECT TO_CHAR(1511539200000 / (1000 * 60 * 60 * 24) +      
				TO_DATE(‘01-01-70‘, ‘DD-MM-YY‘), ‘DD-MM-YY‘) AS CDATE      
		  FROM DUAL
		)
		
		
==10=> Date conversion milliseconds
	SELECT TO_NUMBER(TO_DATE(‘2014-07-28 17:12:45‘, ‘YYYY-MM-DD HH24:MI:SS‘) -      
		TO_DATE(‘1970-01-01 8:0:0‘, ‘YYYY-MM-DD HH24:MI:SS‘)) * 24 * 60 * 60 * 1000      
	FROM DUAL;

		 
==11=> Oracle milliseconds to date
	SELECT TO_CHAR(1406538765000 / (1000 * 60 * 60 * 24) +      
		TO_DATE(‘1970-01-01 08:00:00‘, ‘YYYY-MM-DD HH:MI:SS‘), ‘YYYY-MM-DD HH24:MI:SS‘) AS CDATE
	FROM DUAL;


==12=> Round back to nearest day (time always midnight):
		TO_CHAR (ROUND (TO_DATE ('11-SEP-1994 10:00 AM','DD-MON-YY HH:MI AM'), 'DD'),'DD-MON-YY HH:MI AM')
		11-SEP-1994 12:00 AM


==13=> Round forward to the nearest day:      
		TO_CHAR (ROUND (TO_DATE ('11-SEP-1994 4:00 PM','DD-MON-YY HH:MI AM'), 'DD'),'DD-MON-YY HH:MI AM')
		12-SEP-1994 12:00 AM


==14=> Round back to the nearest hour: 
		TO_CHAR (ROUND (TO_DATE ('11-SEP-1994 4:17 PM','DD-MON-YY HH:MI AM'), 'HH'),'DD-MON-YY HH:MI AM')
		11-SEP-1994 04:00 PM


==15=> begin of date (midnight)
	select  to_number(to_date(date_start,'YYYY-MM-DD HH24:MI:SS') - to_date('1970-01-01','YYYY-MM-DD')) * (24 * 60 * 60 * 1000) time_start 
		from(
			select TO_CHAR (trunc(my_date, 'DD'),'YYYY-MM-DD HH24:MI:SS') date_start
				from (
					select to_date(TO_CHAR(from_tz(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(pt_CRTD_DATE/1000,'SECOND'),(select dbtimezone from dual)) at time zone 'Asia/Jerusalem','MM-DD-YYYY HH24:MI:SS'),'MM-DD-YYYY HH24:MI:SS') my_date 
						from(
							select min(created) pt_CRTD_DATE from table_name
						)
					)
				)
		
		
==16=> timestammp to number
	SELECT to_number(to_date(to_char(my_date_plus, 'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS') -   to_date('1970-01-01','YYYY-MM-DD')) * (24 * 60 * 60 * 1000) mmyres
		FROM  (
			select TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS')+NUMTODSINTERVAL(pt_CRTD_DATE/1000,'SECOND') +NUMTODSINTERVAL(10,'SECOND') my_date_plus from(
				select max(created) pt_CRTD_DATE from table_name
		)
		
		
==17=> orders per date
	https://blogs.oracle.com/sql/post/group-rows-into-n-minute-intervals-with-sql
	https://stackoverflow.com/questions/57941932/oracle-sql-sum-and-group-data-by-daily-weekly-and-monthly-with-missing-date
	https://blogs.oracle.com/sql/post/how-to-generate-days-weeks-or-months-between-two-dates-in-oracle-database
	with ir as ( 

		select name,TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.ff9')+NUMTODSINTERVAL(created/1000,'SECOND') ir_created from monitored_table where execution_Status='Executing' and state='Approve and Provision'

	), ir_range as (

		select trunc(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.ff9')+NUMTODSINTERVAL(min(created)/1000,'SECOND')) cmin,

		trunc(TO_TIMESTAMP('1970-01-01','YYYY-MM-DD HH24:MI:SS.ff9')+NUMTODSINTERVAL(max(created)/1000,'SECOND')) cmax

		from monitored_table

	) 

	select dt, count ( ir_created ) num_orders
		from ( 
			select cmin + level - 1 as dt 
			from   ir_range  
			connect by level <= cmax - cmin + 1 
		) 

	left join ir 
	on     dt <= ir_created 
	and    dt + 1 > ir_created 
	group  by dt 
	order  by dt;	
		
==18===>	Group rows into 10-minute buckets with sparse data
	https://blogs.oracle.com/sql/post/group-rows-into-n-minute-intervals-with-sql
	with times as (
	  select to_date ( :start_time, 'DD-MON-YYYY HH24:MI' )
			   + ( ( level - 1 ) * :duration_in_minutes / 1440 ) dt
	  from   dual
	  connect by level <= :number_of_intervals
	), intervals as (
	  select dt start_date,
			 dt + ( :duration_in_minutes / 1440 ) end_date
	  from   times
	)
	  select start_date, end_date, count ( datetime )
	  from   intervals i
	  left  join time_data t
	  on     start_date <= datetime
	  and    datetime < end_date
	  group  by start_date, end_date
	  order  by start_date;
	  
==19===> TimeZone

	SELECT * FROM nls_session_parameters WHERE parameter = 'NLS_DATE_LANGUAGE';
	SELECT * FROM nls_session_parameters WHERE parameter = 'NLS_DATE_FORMAT';

	SELECT (NEXT_DAY(sysdate,7))FROM DUAL;
	select dbtimezone, sessiontimezone from dual 
	select dbtimezone from dual

==20===> select max date with details
	select A,col_date
	from (select A,col_date
		from tablename 
		  order by col_date desc)
		  where rownum<2

+-------------------------------------------------------+
|										======23======	|
| 	SHOW ID THAT DOES NOT EXIST							|
|														|
+-------------------------------------------------------+
	drop type string_tab force;
	
	create type string_tab is table of varchar(9);
	
	SELECT *   FROM TABLE(string_tab('id','id1','id2')) 	WHERE COLUMN_VALUE NOT IN (SELECT id_number FROM table);
	
	--release_variable string_tab
	drop type string_tab force;
	

+-------------------------------------------------------+
|										======24======	|
|	COUNT ALL ROWS										|
|														|
+-------------------------------------------------------+

select count(*) from table_name


+-------------------------------------------------------+
|										======25======	|
|	COUNT DOUBLED ROWS									|
|														|
+-------------------------------------------------------+
select count(*) from table_name where rowid not in (select min(rowid)   from table_name group by list_of_fields)

--delete doubled rows
delete from table_name where rowid not in (select min(rowid) from table_name group by list_of_fields)



+-------------------------------------------------------+
|										======26======	|
|	IF FIRST QUERY RETURN EMPTY USE ANOTHER				|
|														|
+-------------------------------------------------------+
source (https://stackoverflow.com/questions/12980854/oracle-db-return-second-query-if-first-query-is-empty)
WITH query1 as (
    select 1, 2
    from dual
    where 1=0
    connect by level <= 10
),
query2 as (
    select 3, 4
    from dual
    connect by level <= 10
)
select *
from query1
union all
select *
from query2
where not exists (
    select null
    from query1
);



+-------------------------------------------------------+
|										======28======	|
|		PRIVILEGES	PERMISSIONS ROLES					|
|														|
+-------------------------------------------------------+
--https://stackoverflow.com/questions/9811670/how-to-show-all-privileges-from-a-user-in-oracle
https://stackoverflow.com/questions/9811670/how-to-show-all-privileges-from-a-user-in-oracle
	--DIRECT
	SELECT * FROM USER_SYS_PRIVS; 
	SELECT * FROM USER_TAB_PRIVS;
	SELECT * FROM USER_ROLE_PRIVS;

	--INDIRECT
	select * from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER' order by 1,2,3;
	select * from dba_sys_privs  where grantee = '&USER' or grantee in (select granted_role from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER') order by 1,2,3;
	select * from dba_tab_privs  where grantee = '&USER' or grantee in (select granted_role from dba_role_privs connect by prior granted_role = grantee start with grantee = '&USER') order by 1,2,3,4;
	
	
	SELECT
    PRIVILEGE,
    OBJ_OWNER,
    OBJ_NAME,
    USERNAME,
    LISTAGG(GRANT_TARGET, ',') WITHIN GROUP (ORDER BY GRANT_TARGET) AS GRANT_SOURCES, -- Lists the sources of the permission
    MAX(ADMIN_OR_GRANT_OPT) AS ADMIN_OR_GRANT_OPT, -- MAX acts as a Boolean OR by picking 'YES' over 'NO'
    MAX(HIERARCHY_OPT) AS HIERARCHY_OPT -- MAX acts as a Boolean OR by picking 'YES' over 'NO'
FROM (
    -- Gets all roles a user has, even inherited ones
    WITH ALL_ROLES_FOR_USER AS (
        SELECT DISTINCT CONNECT_BY_ROOT GRANTEE AS GRANTED_USER, GRANTED_ROLE
        FROM DBA_ROLE_PRIVS
        CONNECT BY GRANTEE = PRIOR GRANTED_ROLE
    )
    SELECT
        PRIVILEGE,
        OBJ_OWNER,
        OBJ_NAME,
        USERNAME,
        REPLACE(GRANT_TARGET, USERNAME, 'Direct to user') AS GRANT_TARGET,
        ADMIN_OR_GRANT_OPT,
        HIERARCHY_OPT
    FROM (
        -- System privileges granted directly to users
        SELECT PRIVILEGE, NULL AS OBJ_OWNER, NULL AS OBJ_NAME, GRANTEE AS USERNAME, GRANTEE AS GRANT_TARGET, ADMIN_OPTION AS ADMIN_OR_GRANT_OPT, NULL AS HIERARCHY_OPT
        FROM DBA_SYS_PRIVS
        WHERE GRANTEE IN (SELECT USERNAME FROM DBA_USERS)
        UNION ALL
        -- System privileges granted users through roles
        SELECT PRIVILEGE, NULL AS OBJ_OWNER, NULL AS OBJ_NAME, ALL_ROLES_FOR_USER.GRANTED_USER AS USERNAME, GRANTEE AS GRANT_TARGET, ADMIN_OPTION AS ADMIN_OR_GRANT_OPT, NULL AS HIERARCHY_OPT
        FROM DBA_SYS_PRIVS
        JOIN ALL_ROLES_FOR_USER ON ALL_ROLES_FOR_USER.GRANTED_ROLE = DBA_SYS_PRIVS.GRANTEE
        UNION ALL
        -- Object privileges granted directly to users
        SELECT PRIVILEGE, OWNER AS OBJ_OWNER, TABLE_NAME AS OBJ_NAME, GRANTEE AS USERNAME, GRANTEE AS GRANT_TARGET, GRANTABLE, HIERARCHY
        FROM DBA_TAB_PRIVS
        WHERE GRANTEE IN (SELECT USERNAME FROM DBA_USERS)
        UNION ALL
        -- Object privileges granted users through roles
        SELECT PRIVILEGE, OWNER AS OBJ_OWNER, TABLE_NAME AS OBJ_NAME, ALL_ROLES_FOR_USER.GRANTED_USER AS USERNAME, ALL_ROLES_FOR_USER.GRANTED_ROLE AS GRANT_TARGET, GRANTABLE, HIERARCHY
        FROM DBA_TAB_PRIVS
        JOIN ALL_ROLES_FOR_USER ON ALL_ROLES_FOR_USER.GRANTED_ROLE = DBA_TAB_PRIVS.GRANTEE
    ) ALL_USER_PRIVS
    -- Adjust your filter here
    WHERE USERNAME = 'USER_NAME'
) DISTINCT_USER_PRIVS
GROUP BY
    PRIVILEGE,
    OBJ_OWNER,
    OBJ_NAME,
    USERNAME
;

+-------------------------------------------------------+
|										======28======	|
|		POPULATING VALUES USING MERGE QUERY				|
|														|
+-------------------------------------------------------+



MERGE

INTO    Tab1 c

USING   (select b.emp_reg_id ,a.emp_token_id

from tab2 a , Tab3 b

where a.emp_reg_id = b.emp_reg_id

        ) st

ON (c.emp_token_id = st.emp_token_id  )

WHEN MATCHED THEN

UPDATE SET c.emp_reg_id = st.emp_reg_id ;



Oracle Hierarchical query: how to follow max on each level
https://dba.stackexchange.com/questions/81313/oracle-hierarchical-query-how-to-follow-max-on-each-level
select lpad(' ',2*(level-1))|| max(child)
from test_connect_by  
start with parent is null
connect by prior child = parent
group by level

select lpad(' ',2*(level-1)) || child as result
from 
  ( select parent, max(child) as child 
    from test_connect_by 
    group by parent
  ) t 
start with parent is null 
connect by prior child = parent
order by level ;



 
 
 
 split delimited column (by line feeds) to rows
 https://asktom.oracle.com/ords/f?p=100:11:::::P11_QUESTION_ID:9525167800346253512
 https://odieweblog.wordpress.com/2016/05/20/how-to-using-outer-join-with-xmltable-or-xquery/
 
 https://stackoverflow.com/questions/41048162/iterate-through-all-rows-in-table-pl-sql
 
 