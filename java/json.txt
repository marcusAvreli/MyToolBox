public static void main(String[] args) {
              initApp();
              
              String jsonPathExpression = "$";
              StringBuilder stringBuilder = new StringBuilder();
              FileReader fileReader;
              
              try {
                     fileReader = new FileReader("./resources/output.json");
                     BufferedReader bufferedReader = new BufferedReader(fileReader);
                     String s;
                     while((s=bufferedReader.readLine())!=null) {
                           stringBuilder.append(s);
                           
              
                     }
                     fileReader.close();
              } catch (IOException e2) {
                     // TODO Auto-generated catch block
                     e2.printStackTrace();
              }
              
              
              
              
              //DocumentContext jsonContext = JsonPath.parse(stringBuilder.toString().trim());
              
              JsonPath path = JsonPath.compile(jsonPathExpression);
              Object object = path.read(stringBuilder.toString().trim());
              
              /*JSONParser parser = new JSONParser();
              Object obj;
              try {
                     obj = parser.parse(new FileReader("./resources/outputINTIX.json"));
                     Object res = JsonPath.read(obj,jsonPathExpression);
              } catch (FileNotFoundException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
              } catch (IOException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
              } catch (ParseException e) {
                     // TODO Auto-generated catch block
                     e.printStackTrace();
              }
              */
              
              
              

       }
	   
///read json from file	   
import org.json.JSONTokener;
FileReader reader = new FileReader("/rawReposnse.json");
JSONTokener tokener = new JSONTokener(reader);
JSONObject jsonProvObj = new JSONObject(tokener);

///json path query
import org.json.JSONTokener;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.spi.json.GsonJsonProvider;
import com.jayway.jsonpath.spi.mapper.GsonMappingProvider;  
{"JsonKeyEntryArray":[{"keyName1":"","keyName2":" ","keyName3":""}]}
//FileReader reader = new FileReader("/opt/nova/tmp/umtbTests/rawResponse.json");
FileReader reader = new FileReader("/var/tmp/rawResponse.json");
JSONTokener tokener = new JSONTokener(reader);
JSONObject rootJsonObject = new JSONObject(tokener);
String  managedAttributeName = "JsonKeyEntryArray";

Configuration conf = Configuration.builder()
                           .jsonProvider(new GsonJsonProvider())
                           .mappingProvider(new GsonMappingProvider())
                           .build();

String jsonPathQuery="$."+managedAttributeName+".[*]";
JsonPath jsonPath = JsonPath.compile(jsonPathQuery);
Object resultObject = JsonPath.using(conf).parse(rootJsonObject.toString()).read(jsonPathQuery);
logger.info("ResultClass:"+resultObject.getClass());
logger.info("resultObject: "+resultObject);




	   
	   
