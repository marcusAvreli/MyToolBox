check openssl version
	openssl version
	
check openssl home dir
	openssl version -d



on fresh installed system run: openssl s_client -connect google.com:443
you will get following error: SSL certificate problem: unable to get local issuer certificate
1. 
	source: https://pavolkutaj.medium.com/fix-openssl-error-unable-to-get-local-issuer-certificate-e0ad5c2b675d
	quotation: OpenSSL cannot validate the chain OpenSSL itself comes without a list of Trusted Root Certificate Authorities (unlike browsers!)

2. 
	check openssl  directory where it looks for certificates
	command: openssl version -d
	example output:  OPENSSLDIR: "/etc/openssl"


3.
	download: curl -k -L https://curl.se/ca/cacert.pem	--output $HOME/cacert.pem
	copy: cp $HOME/cacert.pem /etc/openssl/certs


4.
	source: https://stackoverflow.com/questions/25889341/what-is-the-equivalent-of-unix-c-rehash-command-script-on-linux
	quotation: c_rehash needs "perl" for execution. If you can not run c_rehase, try below. use "openssl" in the Shell file
	cd /etc/openssl/certs
	command: for file in *.pem; do ln -s "$file" "$(openssl x509 -hash -noout -in "$file")".0; done
	
	
run again: openssl s_client -connect google.com:443
if all done properly you will see:

SSL handshake has read 6680 bytes and written 392 bytes
Verification: OK
---
New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384
Server public key is 256 bit
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
Early data was not sent
Verify return code: 0 (ok)
---
read:errno=0

Source: https://stackoverflow.com/questions/7587851/openssl-unable-to-verify-the-first-certificate-for-experian-url
	The first error message is telling you more about the problem:

	verify error:num=20:unable to get local issuer certificate

	The issuing certificate authority of the end entity server certificate is

	VeriSign Class 3 Secure Server CA - G3

	Look closely in your CA file - you will not find this certificate since it is an intermediary CA - what you found 

	was a similar-named G3 Public Primary CA of VeriSign.

	But why does the other connection succeed, but this one doesn't? The problem is a misconfiguration of the servers 
	(see for yourself using the -debug option). The "good" server sends the entire certificate chain during the handshake, 
	therefore providing you with the necessary intermediate certificates.

	But the server that is failing sends you only the end entity certificate, and OpenSSL is not capable of downloading 
	the missing intermediate certificate "on the fly" (which would be possible by interpreting the Authority Information Access extension). 
	Therefore your attempt fails using s_client but it would succeed nevertheless if you browse to the same URL using e.g. FireFox (which does 
	support the "certificate discovery" feature).

	Your options to solve the problem are either fixing this on the server side by making the server send the entire chain, too, 
	or by passing the missing intermediate certificate to OpenSSL as a client-side parameter.



source: https://stackoverflow.com/questions/31673587/error-unable-to-verify-the-first-certificate-in-nodejs
error: Verify Return code: 21 (unable to verify the first certificate)
How do I get intermediate certificate

	Save the remote server's certificate details:

		openssl s_client -connect incomplete-chain.badssl.com:443 -servername incomplete-chain.badssl.com | tee logcertfile

	We're looking for the issuer (the intermediate certificate is the issuer / signer of the server certificate):

		openssl x509 -in logcertfile -noout -text | grep -i "issuer"

	It should give you URI of the signing certificate. Download it:

		curl --output intermediate.crt http://cacerts.digicert.com/DigiCertSHA2SecureServerCA.crt

	Finally, convert it to .pem:

		openssl x509 -inform DER -in intermediate.crt -out intermediate.pem -text

	or
		x509 -inform der -in intermediate.crt -out intermediate.pem
		


source: https://stackoverflow.com/questions/50923455/converting-cer-to-pem-returns-error-unable-to-load-certificate

	converting .cer to .pem returns error 'unable to load certificate'

	-----BEGIN CERTIFICATE-----

	MIIHE...

	-----END CERTIFICATE-----


	Your certificate is already in PEM format. Just rename it from certificate.cer to certificate.pem


https://unix.stackexchange.com/questions/16226/how-can-i-verify-ssl-certificates-on-the-command-line
https://unix.stackexchange.com/questions/451207/how-to-trust-self-signed-certificate-in-curl-command-line
https://www.ibm.com/support/pages/how-extract-ca-certificates
https://stackoverflow.com/questions/23885449/unable-to-resolve-unable-to-get-local-issuer-certificate-using-git-on-windows
https://super-unix.com/unixlinux/freebsd-10-root-certificate-store/
https://www.shellhacks.com/git-bash-unable-to-get-local-issuer-certificate/
https://gist.github.com/rustymagnet3000/e1bad38d30827e2f9f68bedc7534084d
https://www.baeldung.com/linux/openssl-extract-certificate-info
source: https://serverfault.com/questions/590870/how-to-view-all-ssl-certificates-in-a-bundle

	openssl storeutl -noout -text -certs bundle.crt


list certificates
	openssl s_client -showcerts -verify 5 -connect stackexchange.com:443 < /dev/null
	openssl s_client -showcerts -verify 5 -connect ftp.gnu.org:443 < /dev/null

download certifications and save to file
	openssl s_client -showcerts -connect stackexchange.com:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >mycertfile.pem
	openssl s_client -showcerts -connect wikipedia.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >mycertfile2.pem
	openssl s_client -showcerts -connect ftp.gnu.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >mycertfile3.pem
	openssl s_client -showcerts -connect dlcdn.apache.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >/etc/openssl/certs/apacheAnt.pem


openssl s_client -showcerts -verify 5 -connect ftp.gnu.org:443 < /dev/null |
   awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/{ if(/BEGIN CERTIFICATE/){a++}; out="cert"a".pem"; print >out}'
for cert in *.pem; do 
        newname=$(openssl x509 -noout -subject -in $cert | sed -nE 's/.*CN ?= ?(.*)/\1/; s/[ ,.*]/_/g; s/__/_/g; s/_-_/-/; s/^_//g;p' | tr '[:upper:]' '[:lower:]').pem
        echo "${newname}"; mv "${cert}" "${newname}" 
done

===========================================================================================================

openssl manual version 

============= U N I X =============
mozilla-rootcerts
bmake
bmake install
mozilla-rootcerts-openssl
bmake
bmake install
============= U N I X END =========
1. Get Certificate
	echo -n | openssl s_client -connect www.github.com:443 | openssl x509 > /etc/openssl/certs/github.com.cert

2. Let also be sure it has the right owner and rights:
	chmod 0644 /etc/openssl/certs/github.com.cert
	chown root:wheel /etc/openssl/certs/github.com.cert

3. Calculate the hash of your CA certificate
	openssl x509 -noout -hash -in /etc/openssl/certs/github.com.cert

4. create a link to your certificate using the calculated hash
	cd /etc/openssl/certs
	sudo ln -s ca.crt 5d3b9418.0
5. Verify settings
	openssl s_client -connect github.com:443 | grep -i -e verify

	RIGHT OUTPUT
		depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert High Assurance EV Root CA
		verify return:1
		depth=1 C = US, O = "DigiCert, Inc.", CN = DigiCert High Assurance TLS Hybrid ECC SHA256 2020 CA1
		verify return:1
		depth=0 C = US, ST = California, L = San Francisco, O = "GitHub, Inc.", CN = github.com
		verify return:1
		Verify return code: 0 (ok)
			Verify return code: 0 (ok)
			Verify return code: 0 (ok)



	ERROR OUTPUT
		depth=1 C = US, O = "DigiCert, Inc.", CN = DigiCert High Assurance TLS Hybrid ECC SHA256 2020 CA1
		verify error:num=20:unable to get local issuer certificate
		verify return:1
		depth=0 C = US, ST = California, L = San Francisco, O = "GitHub, Inc.", CN = github.com
		verify return:1
		Verify return code: 20 (unable to get local issuer certificate)
			Verify return code: 20 (unable to get local issuer certificate)
			Verify return code: 20 (unable to get local issuer certificate)
	
	
	ssl + python
		https://stackoverflow.com/questions/25981703/pip-install-fails-with-connection-error-ssl-certificate-verify-failed-certi

Get Root CA using curl
	curl -sO http://cacerts.digicert.com/DigiCertHighAssuranceEVRootCA.crt 
	openssl x509 -inform DES -in DigiCertHighAssuranceEVRootCA.crt -out DigiCertHighAssuranceEVRootCA.pem -text

	openssl s_client -connect pypi.python.org:443
	CONNECTED(00000003)
	depth=1 /C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 Extended Validation Server CA
	verify error:num=20:unable to get local issuer certificate
	verify return:0
	---
	Certificate chain
	 0 s:/businessCategory=Private Organization/1.3.6.1.4.1.311.60.2.1.3=US/1.3.6.1.4.1.311.60.2.1.2=Delaware/serialNumber=3359300/street=16 Allen Rd/postalCode=03894-4801/C=US/ST=NH/L=Wolfeboro,/O=Python Software Foundation/CN=www.python.org
	   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 Extended Validation Server CA
	 1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert SHA2 Extended Validation Server CA
	   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance EV Root CA




==================================================================================
	JAVA VERSION
	
	
Default keystore location
Linux: $JAVA_HOME/jre/lib/security/cacerts 
Windows: "%JAVA_HOME%/jre/lib/security/cacerts" 

1. List certificates
	keytool -keystore $JAVA_HOME/jre/lib/security/cacerts -list
	The default password for the truststore: changeit

2. Generate keystore file
	keytool -genkeypair -keystore filename.keystore -keypass domainname.com -storepass domainname.com -keyalg RSA -keysize 2048 -alias server -deststoretype pkcs12

3. Get certificate from server repository.primefaces.org
	keytool -J-Djava.net.useSystemProxies=true -printcert -rfc -sslserver repository.primefaces.org:443 > certPrimeFaces.pem
  
4. Save repository.primefaces.org certificate in keystore
	keytool -importcert -file c:\tomcat9014\bin\certOpenLdap.pem -alias certOpenLdap -storepass changeit -keystore "myJavaKeyStrore.jks"

5. List inserted certificate
	keytool -list -keystore "myJavaKeyStrore.jks" -alias certOpenLdap


keytool -J-Djava.net.useSystemProxies=true -printcert -rfc -sslserver 192.168.1.14:636 > certPrimeFaces.pem

cd /etc/ssl/openldap/certs
keytool  -printcert -rfc -sslserver 192.168.1.14:636 > certPrimeFaces.pem
openssl verify -CAfile /etc/ssl/openldap/certs/cacert.pem /etc/ssl/openldap/certs/certPrimeFaces.pem


##WHICH TRUSSTORE CURRENTLY IN USE
#! /bin/bash

CACERTS=$(readlink -e $(dirname $(readlink -e $(which keytool)))/../lib/security/cacerts)

if keytool -list -keystore $CACERTS -storepass changeit > /dev/null ; then
    echo $CACERTS
else
    echo 'Can not find cacerts file.' >&2
    exit 1
fi




