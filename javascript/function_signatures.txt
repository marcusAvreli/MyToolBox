+-------------------------------------------------------+
|											=====2====	|
|	REDUCER												|
|														|
+-------------------------------------------------------+
The final result of running the reducer across all elements of the array is a single value
------------1
var resulrTest = Array.from(someCollection).reduce((acc, element) => {
  var array_name = ["item1"];
 
  return array_name;
}, {});
------------2
var resulrTest2 = Array.from(someCollection).reduce(this.someFn2, {});

someFn2(acc,element){
	console.log("someFn2:"+someFn2);
}


+-------------------------------------------------------+
|											=====2====	|
|	FOREACH												|
|														|
+-------------------------------------------------------+
Array.from(someCollection).forEach( this.someFn) 

someFn(element)

Array.from(someCollection).forEach(item =>{---some processing---});



 showFooForEach: function() {
    this.things.map(function(thing) {
      console.log(this.foo, thing);
    }, this);
  }
  
  
+-------------------------------------------------------+
|											=====3====	|
|	SUBSEQUENT CHAINED OBSERVABLES						|
|														|
+-------------------------------------------------------+
https://cosmincrisan.medium.com/angular-http-calls-chain-execution-with-rxjs-mergemap-eb2d7f25139
var observableUV = this.uvService.insert(uv);
var observableUVC = this.uvcService.insertMany(resultTest2)

observableUV.pipe(
	mergeMap(() => observableUVC)
	
	
	).subscribe(() => {console.log("success")})
	

+-------------------------------------------------------+
|											=====3====	|
|	DYNAMIC ID ATTR.ID									|
|														|
+-------------------------------------------------------+

html component
<div [attr.id]="idProp" >
               </div>
from component
	this.idProp="add_data_source_column_table_"+uuidv4();